import { Knex } from 'knex';
import { Accountability } from './accountability';
import { ApiExtensionContext } from './extensions';
declare type HookContext = {
    database: Knex;
    schema: Record<string, any> | null;
    accountability: Accountability | null;
};
declare type FilterHandler = (payload: any, meta: Record<string, any>, context: HookContext) => any | Promise<any>;
declare type ActionHandler = (meta: Record<string, any>, context: HookContext) => void | Promise<void>;
declare type InitHandler = (meta: Record<string, any>) => void | Promise<void>;
declare type ScheduleHandler = () => void | Promise<void>;
declare type RegisterFunctions = {
    filter: (event: string, handler: FilterHandler) => void;
    action: (event: string, handler: ActionHandler) => void;
    init: (event: string, handler: InitHandler) => void;
    schedule: (cron: string, handler: ScheduleHandler) => void;
};
declare type HookHandlerFunction = (register: RegisterFunctions, context: ApiExtensionContext) => void;
export declare type HookConfig = HookHandlerFunction;
export {};
//# sourceMappingURL=hooks.d.ts.map